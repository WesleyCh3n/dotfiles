snippet t "init template"
	cmake_minimum_required(VERSION 3.10)

	project(${1})
	set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
	set(CMAKE_CXX_STANDARD 17)

	add_executable(main \${CMAKE_CURRENT_SOURCE_DIR}/src/main.cc)

snippet gt "init gtest"
  include(FetchContent)
  FetchContent_Declare(
    googletest
    URL https://github.com/google/googletest/releases/download/v1.15.2/googletest-1.15.2.tar.gz
  )
  FetchContent_MakeAvailable(googletest)
  include(GoogleTest)
  enable_testing()

  add_executable(${1:test_} ${2:test.cpp})
  target_link_libraries(${1} PRIVATE gtest_main ${3})
  target_include_directories(${1} PRIVATE ${4})
  gtest_discover_tests(${1})

snippet cpm
	include(\${CMAKE_CURRENT_SOURCE_DIR}/cmake/CPM.cmake)

snippet fmt
  CPMAddPackage(
    NAME fmt
    GIT_TAG 10.1.1
    GITHUB_REPOSITORY fmtlib/fmt
    OPTIONS "FMT_INSTALL YES"
  )

snippet spdlog
  CPMAddPackage(
    NAME fmt
    GIT_TAG 10.1.1
    GITHUB_REPOSITORY fmtlib/fmt
    OPTIONS "FMT_INSTALL YES"
  )
  CPMAddPackage(
    NAME spdlog
    GIT_TAG v1.12.0
    GITHUB_REPOSITORY gabime/spdlog
    OPTIONS "SPDLOG_INSTALL YES"
    "SPDLOG_FMT_EXTERNAL YES"
  )
  add_dependencies(spdlog fmt)

snippet cxxopts
	CPMAddPackage("gh:jarro2783/cxxopts@3.1.1")

snippet proj
	project(${0:Name})

snippet min
	cmake_minimum_required(VERSION ${0:3.10})

snippet include
	include_directories(${${0:include_dir}})

snippet find
	find_package(${1:library} ${0:REQUIRED})

snippet glob
	file(glob ${1:srcs} *.${0:cpp})

snippet subdir
	add_subdirectory(${0:src})

snippet lib
	add_library(${1:lib} ${${0:srcs}})

snippet link
	target_link_libraries(${1:bin} ${0:somelib})

snippet tcopt
	target_compile_options(${1:TARGET_NAME} PRIVATE
		$<$<CXX_COMPILER_ID:MSVC>:/W4 /WX>
		$<$<NOT:$<CXX_COMPILER_ID:MSVC>>:-Wall -Wextra -Wpedantic -Werror>
		$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Release>>:/MT> # Runtime library: Multi-threaded
		$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:RelWithDebInfo>>:/MT> # Runtime library: Multi-threaded
		$<$<AND:$<CXX_COMPILER_ID:MSVC>,$<CONFIG:Debug>>:/MTd> # Runtime library: Multi-threaded Debug
	)

snippet bin
	add_executable(${1:bin})

snippet set
	set(${1:var} ${0:val})

snippet dep
	add_dependencies(${1:target}
		${0:dep}
	)

snippet ext_url
	include(ExternalProject)
	ExternalProject_Add(${1:googletest}
	  URL ${2:http://googletest.googlecode.com/files/gtest-1.7.0.zip}
	  URL_HASH SHA1=${3:f85f6d2481e2c6c4a18539e391aa4ea8ab0394af}
	  SOURCE_DIR "${4:${CMAKE_BINARY_DIR}/gtest-src}"
	  BINARY_DIR "${0:${CMAKE_BINARY_DIR}/gtest-build}"
	  CONFIGURE_COMMAND ""
	  BUILD_COMMAND     ""
	  INSTALL_COMMAND   ""
	  TEST_COMMAND      ""
	)

snippet ext_git
	include(ExternalProject)
	ExternalProject_Add(${1:googletest}
	  GIT_REPOSITORY    ${2:https://github.com/google/googletest.git}
	  GIT_TAG           ${3:master}
	  SOURCE_DIR        "${4:${CMAKE_BINARY_DIR}/googletest-src}"
	  BINARY_DIR        "${0:${CMAKE_BINARY_DIR}/googletest-build}"
	  CONFIGURE_COMMAND ""
	  BUILD_COMMAND     ""
	  INSTALL_COMMAND   ""
	  TEST_COMMAND      ""
	)

snippet props
	set_target_properties(${1:target}
		${2:properties} ${3:compile_flags}
		${0:"-O3 -Wall -pedantic"}
	)

snippet test
	add_test(${1:ATestName} ${0:testCommand --options})

