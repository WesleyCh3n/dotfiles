local markdown_treesitter = [[
 ;From MDeiml/tree-sitter-markdown & Helix
(setext_heading
  (paragraph) @markup.heading.1
  (setext_h1_underline) @markup.heading.1)
(setext_heading
  (paragraph) @markup.heading.2
  (setext_h2_underline) @markup.heading.2)
(atx_heading
  (atx_h1_marker)) @markup.heading.1
(atx_heading
  (atx_h2_marker)) @markup.heading.2
(atx_heading
  (atx_h3_marker)) @markup.heading.3
(atx_heading
  (atx_h4_marker)) @markup.heading.4
(atx_heading
  (atx_h5_marker)) @markup.heading.5
(atx_heading
  (atx_h6_marker)) @markup.heading.6
(info_string) @label
(pipe_table_header
  (pipe_table_cell) @markup.heading)
(pipe_table_header
  "|" @punctuation.special)
(pipe_table_row
  "|" @punctuation.special)
(pipe_table_delimiter_row
  "|" @punctuation.special)
(pipe_table_delimiter_cell) @punctuation.special
; Code blocks (conceal backticks and language annotation)
(indented_code_block) @markup.raw.block
((fenced_code_block) @markup.raw.block
  (#set! priority 90))
(fenced_code_block
  (fenced_code_block_delimiter) @punctuation.delimiter)
(fenced_code_block
  (info_string
    (language) @label))
(link_destination) @markup.link.url
[
  (link_title)
  (link_label)
] @markup.link.label
((link_label)
  .
  ":" @punctuation.delimiter)
[
  (list_marker_plus)
  (list_marker_minus)
  (list_marker_star)
  (list_marker_dot)
  (list_marker_parenthesis)
] @markup.list
; NOTE: The following has been commented out due to issues with spaces in the
; list marker nodes generated by the parser. If those spaces ever get captured
; by a different node (e.g. block_continuation) we can safely re-add these
; conceals.
; ;; Conceal bullet points
; ([(list_marker_plus) (list_marker_star)]
;   @punctuation.special
;   (#offset! @punctuation.special 0 0 0 -1)
;   (#set! conceal "•"))
; ([(list_marker_plus) (list_marker_star)]
;   @punctuation.special
;   (#any-of? @punctuation.special "+" "*")
;   (#set! conceal "•"))
; ((list_marker_minus)
;   @punctuation.special
;   (#offset! @punctuation.special 0 0 0 -1)
;   (#set! conceal "—"))
; ((list_marker_minus)
;   @punctuation.special
;   (#eq? @punctuation.special "-")
;   (#set! conceal "—"))
(thematic_break) @punctuation.special
(task_list_marker_unchecked) @markup.list.unchecked
(task_list_marker_checked) @markup.list.checked
((block_quote) @markup.quote
  (#set! priority 90))
([
  (plus_metadata)
  (minus_metadata)
] @keyword.directive
  (#set! priority 90))
[
  (block_continuation)
  (block_quote_marker)
] @punctuation.special
(backslash_escape) @string.escape
(inline) @spell
        ]]

return {
  {
    "nvim-treesitter/nvim-treesitter",
    version = false, -- last release is way too old and doesn't work on Windows
    build = ":TSUpdateSync",
    -- event = { "BufReadPost", "BufNewFile" },
    dependencies = {
      'nvim-treesitter/nvim-treesitter-textobjects',
      { 'nvim-treesitter/nvim-treesitter-context', opts = {} },
      'hiphish/rainbow-delimiters.nvim',
    },
    opts = function()
      vim.wo.foldmethod = "expr"
      vim.o.foldexpr = "nvim_treesitter#foldexpr()"
      vim.wo.foldenable = false -- can be enabled directly in opened file - using 'zi' - toogle fold
      require("vim.treesitter.query").set("markdown", "highlights", markdown_treesitter)
      return {
        ensure_installed = {
          "regex",
          "python",
          "html",
          "c",
          "cpp",
          "rust",
          "css",
          "vim",
          "lua",
          "bash",
          "go",
          "javascript",
          "typescript",
          "tsx",
          "markdown",
          "markdown_inline",
        },
        highlight = {
          enable = true,
          use_languagetree = true,
          additional_vim_regex_highlighting = false,
          disable = { "latex", "bash" },
        },
        autopairs = {
          enable = true
        },
        rainbow = {
          enable = true,
          loaded = true,
          extended_mode = true,
          max_file_lines = nil,
        },
        indent = {
          enable = true
        },
        textobjects = {
          select = {
            enable = true,
            lookahead = true,
            keymaps = {
              ["af"] = "@function.outer",
              ["if"] = "@function.inner",
              ["ac"] = "@class.outer",
              ["ic"] = "@class.inner",
            }
          },
          move = {
            enable = true,
            set_jumps = true, -- whether to set jumps in the jumplist
            goto_next_start = {
              ["]m"] = "@function.outer",
              ["]]"] = "@class.outer",
            },
            goto_previous_start = {
              ["[m"] = "@function.outer",
              ["[["] = "@class.outer",
            },
            goto_next_end = {
              ["]M"] = "@function.outer",
              ["]["] = "@class.outer",
            },
            goto_previous_end = {
              ["[M"] = "@function.outer",
              ["[]"] = "@class.outer",
            },
          },
          lsp_interop = {
            -- NOTE: I use vim.lsp.buf.hover
            -- enable = true,
            -- border = 'single',
            -- peek_definition_code = {
            --   ["<leader>df"] = "@function.outer",
            --   ["<leader>dF"] = "@class.outer",
            -- },
          },
        },
      }
    end,
    config = function(_, opts)
      -- if type(opts.ensure_installed) == "table" then
      --   ---@type table<string, boolean>
      --   local added = {}
      --   opts.ensure_installed = vim.tbl_filter(function(lang)
      --     if added[lang] then
      --       return false
      --     end
      --     added[lang] = true
      --     return true
      --   end, opts.ensure_installed)
      -- end
      require("nvim-treesitter.configs").setup(opts)
    end,
  },
  {
    'hiphish/rainbow-delimiters.nvim',
    init = function()
      local rainbow_delimiters = require 'rainbow-delimiters'
      vim.g.rainbow_delimiters = {
        strategy = {
          [''] = rainbow_delimiters.strategy['global'],
          vim = rainbow_delimiters.strategy['local'],
        },
        query = {
          [''] = 'rainbow-delimiters',
          lua = 'rainbow-blocks',
        },
        highlight = {
          'RainbowDelimiterRed',
          'RainbowDelimiterYellow',
          'RainbowDelimiterBlue',
          'RainbowDelimiterOrange',
          'RainbowDelimiterGreen',
          'RainbowDelimiterViolet',
          'RainbowDelimiterCyan',
        },
      }
    end,
  }
}
